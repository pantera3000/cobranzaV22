from django.shortcuts import render, get_object_or_404, redirect
from django.core.paginator import Paginator
from django.db.models import Q
from django.http import HttpResponse
from django.contrib import messages
from .models import Cliente
from .forms import ClienteForm
import csv
from openpyxl import Workbook
from documentos.models import Documento
from cobros.models import Cobro
from devoluciones.models import Devolucion
from django.db.models import Sum, F
from django.utils import timezone  # ✅ Falta: para timezone.now()


def cliente_list(request):
    query = request.GET.get('q', '')
    if query:
        clientes = Cliente.objects.filter(
            Q(nombre__icontains=query) | Q(dni_ruc__icontains=query)
        )
    else:
        clientes = Cliente.objects.all()

    paginator = Paginator(clientes, 10)  # 10 por página
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'clientes/cliente_list.html', {
        'page_obj': page_obj,
        'query': query
    })


def cliente_detail(request, pk):
    cliente = get_object_or_404(Cliente, pk=pk)

    # Filtros y paginación para Documentos
    docs_query = request.GET.get('docs_q')
    if docs_query == 'None':
        docs_query = None
    docs_page = request.GET.get('docs_page', 1)
    documentos = Documento.objects.filter(cliente=cliente).order_by('-fecha_emision')
    if docs_query:
        documentos = documentos.filter(
            Q(numero__icontains=docs_query) |
            Q(serie__icontains=docs_query)
        )
    docs_paginator = Paginator(documentos, 5)
    docs_page_obj = docs_paginator.get_page(docs_page)

    # Filtros y paginación para Cobros (Pagos)
    cobros_query = request.GET.get('cobros_q')
    if cobros_query == 'None':
        cobros_query = None
    cobros_page = request.GET.get('cobros_page', 1)
    cobros = Cobro.objects.filter(documento__cliente=cliente).select_related('documento').order_by('-fecha')
    if cobros_query:
        cobros = cobros.filter(
            Q(documento__numero__icontains=cobros_query) |
            Q(monto__icontains=cobros_query)
        )
    cobros_paginator = Paginator(cobros, 5)
    cobros_page_obj = cobros_paginator.get_page(cobros_page)

    # Filtros y paginación para Devoluciones
    devoluciones_query = request.GET.get('devoluciones_q')
    if devoluciones_query == 'None':
        devoluciones_query = None
    devoluciones_page = request.GET.get('devoluciones_page', 1)
    devoluciones = Devolucion.objects.filter(documento__cliente=cliente).select_related('documento').order_by('-fecha')
    if devoluciones_query:
        devoluciones = devoluciones.filter(
            Q(documento__numero__icontains=devoluciones_query) |
            Q(monto__icontains=devoluciones_query)
        )
    devoluciones_paginator = Paginator(devoluciones, 10)
    devoluciones_page_obj = devoluciones_paginator.get_page(devoluciones_page)

    # ✅ Cálculos de resumen
    total_facturado = documentos.aggregate(total=Sum('monto_total'))['total'] or 0
    total_pagado = sum(doc.monto_pagado for doc in documentos)
    total_devolucion = sum(doc.monto_devolucion for doc in documentos)
    saldo_pendiente = total_facturado - total_pagado - total_devolucion

    # Documentos vencidos con saldo pendiente
    vencidos = documentos.filter(
        fecha_vencimiento__lt=timezone.now(),
        monto_total__gt=F('monto_pagado') + F('monto_devolucion')
    )
    total_vencido = sum(doc.get_saldo_pendiente() for doc in vencidos)

    return render(request, 'clientes/cliente_detail.html', {
        'cliente': cliente,
        'docs_page_obj': docs_page_obj,
        'cobros_page_obj': cobros_page_obj,
        'devoluciones_page_obj': devoluciones_page_obj,
        'docs_query': docs_query,
        'cobros_query': cobros_query,
        'devoluciones_query': devoluciones_query,

        # ✅ Datos del resumen
        'total_facturado': total_facturado,
        'total_pagado': total_pagado,
        'total_devolucion': total_devolucion,
        'saldo_pendiente': saldo_pendiente,
        'total_vencido': total_vencido,
    })



def cliente_create(request):
    if request.method == 'POST':
        form = ClienteForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Cliente creado exitosamente.')
            return redirect('clientes:cliente_list')
    else:
        form = ClienteForm()
    return render(request, 'clientes/cliente_form.html', {
        'form': form,
        'title': 'Crear Cliente'
    })


def cliente_update(request, pk):
    cliente = get_object_or_404(Cliente, pk=pk)
    if request.method == 'POST':
        form = ClienteForm(request.POST, instance=cliente)
        if form.is_valid():
            form.save()
            messages.success(request, 'Cliente actualizado exitosamente.')
            return redirect('clientes:cliente_list')
    else:
        form = ClienteForm(instance=cliente)
    return render(request, 'clientes/cliente_form.html', {
        'form': form,
        'title': 'Editar Cliente'
    })


def cliente_delete(request, pk):
    cliente = get_object_or_404(Cliente, pk=pk)
    if request.method == 'POST':
        cliente.delete()
        messages.success(request, 'Cliente eliminado exitosamente.')
        return redirect('clientes:cliente_list')
    return render(request, 'clientes/cliente_confirm_delete.html', {
        'cliente': cliente
    })


def cliente_export_excel(request):
    clientes = Cliente.objects.all()
    workbook = Workbook()
    sheet = workbook.active
    sheet.title = "Clientes"

    # Encabezados
    headers = ['Nombre', 'DNI/RUC', 'Dirección', 'Teléfono', 'Correo', 'Notas', 'Creado en']
    for col_num, header in enumerate(headers, 1):
        cell = sheet.cell(row=1, column=col_num)
        cell.value = header

    # Datos
    for cliente in clientes:
        row = [
            cliente.nombre,
            cliente.dni_ruc,
            cliente.direccion or '',
            cliente.telefono or '',
            cliente.correo or '',
            cliente.notas or '',
            cliente.creado_en.strftime('%d/%m/%Y %H:%M')
        ]
        sheet.append(row)

    # Preparar respuesta HTTP
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=clientes.xlsx'
    workbook.save(response)
    return response


def cliente_export_csv(request):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename=clientes.csv'

    writer = csv.writer(response)
    writer.writerow(['Nombre', 'DNI/RUC', 'Dirección', 'Teléfono', 'Correo', 'Notas', 'Creado en'])

    for cliente in Cliente.objects.all():
        writer.writerow([
            cliente.nombre,
            cliente.dni_ruc,
            cliente.direccion or '',
            cliente.telefono or '',
            cliente.correo or '',
            cliente.notas or '',
            cliente.creado_en.strftime('%d/%m/%Y %H:%M')
        ])

    return response